import emoji
from aiogram import Router, Bot, F, types
from aiogram.filters import Command, Text
from aiogram.types import Message, ReplyKeyboardRemove, ChatMemberUpdated
from emoji import emojize

from db_controller import *
from utils import get_chart_activity_stat

router = Router()


@router.message(Command(commands=["start"]))
async def cmd_start(message: Message):
    await message.answer(text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=ReplyKeyboardRemove())


@router.message(Command(commands=["menu"]))
async def cmd_menu(message: Message):
    main_menu = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text='üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –£—á–∞—Å—Ç–Ω–∏–∫–∏', callback_data='users_button_click')],
            [types.InlineKeyboardButton(text='üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', callback_data='stat_button_click')],
            [types.InlineKeyboardButton(text='üé≤ –ò–≥—Ä–∞—Ç—å –≤ ...', callback_data='game_button_click')]])
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç", reply_markup=main_menu)


@router.callback_query(Text(text='stat_button_click'))
async def stat_button_click(call: types.CallbackQuery):
    chat_id = call.message.chat.id
    await call.message.delete()
    await call.message.answer_photo(photo=get_chart_activity_stat(chat_id))


@router.message(Command(commands=["help"]))
async def cmd_start(message: Message):
    await message.answer(text="–î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –±–æ—Ç—É, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã –∑–∞–ø—Ä–æ—Å –Ω–∞—á–∏–Ω–∞–ª—Å—è —Å–æ —Å–ª–æ–≤–∞ \"–ë–æ—Ç\"\n"
                              "–§—Ä–∞–∑—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –±–æ—Ç:\n"
                              "\"–º–µ–Ω—è –∑–æ–≤—É—Ç\" - –∑–∞–¥–∞—Ç—å —Å–≤–æ—ë –∏–º—è\n"
                              "\"–∫—Ç–æ —è\" - —É–∑–Ω–∞—Ç—å —Å–≤–æ—ë –∏–º—è\n"
                              "\"–∫—Ç–æ –±–æ–ª—Ç—É—à–∫–∞\" - –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n")


@router.chat_member()
async def members_process(event: ChatMemberUpdated, bot: Bot):
    if not has_chat(event.chat.id):
        add_chat(event.chat.id, event.chat.title)


def reg_user(chat_id, user_info):
    exist_user = has_user(chat_id, user_info.id)
    if not exist_user:
        username = user_info.username if user_info.username is not None else str(user_info.id)
        add_user(user_info.id, username, chat_id)


@router.message(F.photo)
async def photo_msg(message: Message):
    reg_user(message.chat.id, message.from_user)
    inc_user_msg_count(message.from_user.id, message.chat.id)


@router.message(F.text.regexp(r'^(?!–ë–æ—Ç).+$'))
async def cmd_msg(message: Message):
    reg_user(message.chat.id, message.from_user)
    inc_user_msg_count(message.from_user.id, message.chat.id)


@router.message(Text(startswith='–ë–æ—Ç'))
async def cmd_msg(message: Message):
    reg_user(message.chat.id, message.from_user)
    inc_user_msg_count(message.from_user.id, message.chat.id)
    if '–º–µ–Ω—è –∑–æ–≤—É—Ç' in message.text.lower():
        text = message.text
        name_start = text.find('–º–µ–Ω—è –∑–æ–≤—É—Ç') + 10
        update_user_name(message.from_user.id, text[name_start + 1:], message.chat.id)
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {text[name_start + 1:]}')
    if '–∫—Ç–æ —è' in message.text.lower():
        info = get_user_info(message.from_user.id, message.chat.id)
        await message.answer(f'–¢—ã {info[2]}')
    if '–∫—Ç–æ –±–æ–ª—Ç—É—à–∫–∞' in message.text.lower():
        user = max(get_users_msg_count(message.chat.id), key=lambda x: x[1])[0]
        await message.answer(f"–ì–æ–≤–æ—Ä—É–Ω: {user} {emojize(':monkey_face:')}")
