import asyncio
import random
import re

from aiogram import Router, Bot, F, types
from aiogram.filters import Command, Text, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove, ChatMemberUpdated
from emoji import emojize

from controllers.db_controller import *
from controllers.geo_controller import check_city, get_city_info
from controllers.morpho_controller import create_rhyme
from states.cities_game_state import CitiesGameState
from utils import get_chart_activity_stat, get_right_bracket_word

router = Router()


@router.message(Command(commands=["start"]))
async def cmd_start(message: Message):
    await message.answer(text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=ReplyKeyboardRemove())


@router.message(Text(startswith=':)'), F.from_user.username == 'korwart')
async def brackets_counter(message: Message):
    if not has_chat(message.chat.id):
        add_chat(message.chat.id, message.chat.title)
    reg_user(message.chat.id, message.from_user)
    current_value = message.text.count(')')
    count = inc_user_brackets_count(message.from_user.id, message.chat.id, current_value)
    await message.answer(f'–í —ç—Ç–æ—Ç —Ä–∞–∑ –≤—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ {current_value} {get_right_bracket_word(current_value)}. '
                         f'–ê –í–°–ï–ì–û {count} {get_right_bracket_word(count).upper()}! üò°ü§¨')


@router.message(Command(commands=["menu"]))
async def cmd_menu(message: Message):
    main_menu = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text='üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –£—á–∞—Å—Ç–Ω–∏–∫–∏', callback_data='users_button_click')],
            [types.InlineKeyboardButton(text='üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', callback_data='stat_button_click')],
            [types.InlineKeyboardButton(text='üåá –ì–æ—Ä–æ–¥–∞', callback_data='game_cities_button_click')]
        ])
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç", reply_markup=main_menu)


@router.callback_query(Text(text='stat_button_click'))
async def stat_button_click(call: types.CallbackQuery):
    chat_id = call.message.chat.id
    await call.message.delete()
    await call.message.answer_photo(photo=get_chart_activity_stat(chat_id))


@router.callback_query(Text(text='users_button_click'))
async def game_button_click(call: types.CallbackQuery):
    personages = ['üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº', 'üêª‚Äç‚ùÑÔ∏è', 'üê®', 'üêØ', 'ü¶Å', 'üêÆ', 'üê∑', 'üêΩ', 'üê∏',
                  'üêµ', 'üêî', 'üê∫', 'ü¶Ü', 'ü¶Ö', 'üêó', 'üê¥', 'ü¶Ñ', 'üêù', 'üêõ', 'üêå', 'ü™±', 'üêû', 'ü™∞', 'ü™≤', 'ü™≥',
                  'ü¶ü', 'ü¶Ç', 'üê¢', 'üêç', 'üêô', 'ü¶Ä', 'üê†', 'üê¨', 'üêÖ', 'üêÜ', 'ü¶ì', 'ü¶ç', 'ü¶ß', 'ü¶£', 'ü¶õ', 'üêñ',
                  'üêè', 'üêë', 'ü¶¢', 'üêï‚Äçü¶∫', 'üêà', 'üêà‚Äç‚¨õ', 'üêì', 'ü¶ù', 'ü¶®', 'ü¶î', 'ü¶°', 'üêÄ', 'üêø', 'üêÅ', 'ü¶•', 'ü¶¶',
                  'ü¶´']
    users = get_users(call.message.chat.id)
    str = ''
    for user in users:
        str += f'{random.choice(personages)} {user}\n'
    await call.message.answer(str)


@router.callback_query(Text(text='game_cities_button_click'))
async def game_button_click(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª—é–±–æ–≥–æ –≥–æ—Ä–æ–¥–∞', reply_markup=
    types.ReplyKeyboardMarkup(keyboard=[[types.KeyboardButton(text='–ó–∞–≤–µ—Ä—à–∏—Ç—å'), types.KeyboardButton(text='–ò–Ω—Ñ–æ –æ –≥–æ—Ä–æ–¥–µ')]], resize_keyboard=True))
    await call.answer()
    await state.set_state(CitiesGameState.city)


# TODO: –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
# TODO: –í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç.
# TODO: –•—Ä–∞–Ω–∏—Ç—å –Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∞ –æ–±—ä–µ–∫—Ç???
@router.message(CitiesGameState.city)
async def enter_city_state(message: Message, state: FSMContext):
    data = await state.get_data()
    if message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å':
        await message.answer('–ö–æ–Ω–µ—Ü –∏–≥—Ä—ã', reply_markup=types.ReplyKeyboardRemove())
        if 'city' in data and len(data['city']['users_cities']) > 0:
            str = ''
            for user, count in data['city']['users_cities'].items():
                str += f'{get_user_info(user, message.chat.id)[2]}  {count}\n'
            await message.answer(f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n{str}')
        await state.clear()
        return
    if message.text == '–ò–Ω—Ñ–æ –æ –≥–æ—Ä–æ–¥–µ':
        if 'city' in data:
            info = get_city_info(data["city"]["city"])
            await message.answer(info.address)
            return
    current_city = message.text.strip().lower()
    if not check_city(current_city):
        await message.answer(f'–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç!\n')
        if 'city' in data:
            await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞ –±—É–∫–≤—É \'{data["city"]["city"][-1].upper()}\'')
        return
    current_city = current_city.replace('—å', '').replace('–π', '–∏').replace('—ã', '')
    if 'city' in data:
        old_city = data['city']['city']
        if data['city']['user'] == message.from_user.id:
            await message.answer(f'–ù–µ –Ω–∞–¥–æ –∏–≥—Ä–∞—Ç—å —Å–∞–º–æ–º—É —Å —Å–æ–±–æ–π, –ª—É—á—à–µ –ø–æ–¥—Ä–æ—á–∏!')
            return
        if old_city[-1] != current_city[0]:
            await message.answer(f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –±—É–∫–≤—É \'{old_city[-1].upper()}\'')
            return
        if current_city in data['city']['cities']:
            await message.answer(f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥ —É–∂–µ –±—ã–ª\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –±—É–∫–≤—É \'{old_city[-1].upper()}\'')
            return
        else:
            await message.answer(f'–í–µ—Ä–Ω–æ, –∏–¥—ë–º –¥–∞–ª–µ–µ\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –±—É–∫–≤—É \'{current_city[-1].upper()}\'')
            users_cities = data['city']['users_cities']
            if message.from_user.id in users_cities:
                users_cities[message.from_user.id] += 1
            else:
                users_cities[message.from_user.id] = 1
            await state.update_data(city={
                'city': current_city,
                'user': message.from_user.id,
                'cities': [*data['city']['cities'], current_city],
                'users_cities': users_cities
            })

    else:
        await state.update_data(city={
            'city': current_city,
            'user': message.from_user.id,
            'cities': [current_city],
            'users_cities': {}
        })
        await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –±—É–∫–≤—É \'{current_city[-1].upper()}\'')


@router.message(Command(commands=["help"]))
async def cmd_start(message: Message):
    await message.answer(text="–î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –±–æ—Ç—É, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã –∑–∞–ø—Ä–æ—Å –Ω–∞—á–∏–Ω–∞–ª—Å—è —Å–æ —Å–ª–æ–≤–∞ \"–ë–æ—Ç\"\n"
                              "–§—Ä–∞–∑—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –±–æ—Ç:\n"
                              "\"–º–µ–Ω—è –∑–æ–≤—É—Ç\" - –∑–∞–¥–∞—Ç—å —Å–≤–æ—ë –∏–º—è\n"
                              "\"–∫—Ç–æ —è\" - —É–∑–Ω–∞—Ç—å —Å–≤–æ—ë –∏–º—è\n"
                              "\"–∫—Ç–æ –±–æ–ª—Ç—É—à–∫–∞\" - –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                              "\"–æ–±–∑–æ–≤–∏\" - –æ–±–∑—ã–≤–∞–µ—Ç –∫–æ–≥–æ —É–≥–æ–¥–Ω–æ\n"
                              "\"—Ä–∏—Ñ–º—É–π\" - —Ä–∏—Ñ–º—É–µ—Ç —Å–ª–æ–≤–∞ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –ê–ª–µ–∫—Å–µ—è –ù–∏–∫–æ–ª–∞–µ–≤–∏—á–∞\n")


@router.chat_member()
async def members_process(event: ChatMemberUpdated, bot: Bot):
    if not has_chat(event.chat.id):
        add_chat(event.chat.id, event.chat.title)


def reg_user(chat_id, user_info):
    exist_user = has_user(chat_id, user_info.id)
    if not exist_user:
        username = user_info.username if user_info.username is not None else str(user_info.id)
        add_user(user_info.id, username, chat_id)


@router.message(F.photo)
async def photo_msg(message: Message):
    if not has_chat(message.chat.id):
        add_chat(message.chat.id, message.chat.title)
    reg_user(message.chat.id, message.from_user)
    inc_user_msg_count(message.from_user.id, message.chat.id, len(message.text.split()))


@router.message(F.text.regexp(r'^(?!–ë–æ—Ç).+$'), StateFilter(None))
async def cmd_msg(message: Message):
    if not has_chat(message.chat.id):
        add_chat(message.chat.id, message.chat.title)
    reg_user(message.chat.id, message.from_user)
    inc_user_msg_count(message.from_user.id, message.chat.id, len(message.text.split()))


@router.message(Text(startswith='–ë–æ—Ç'))
async def cmd_msg(message: Message):
    if not has_chat(message.chat.id):
        add_chat(message.chat.id, message.chat.title)
    reg_user(message.chat.id, message.from_user)
    inc_user_msg_count(message.from_user.id, message.chat.id, len(message.text.split()))
    if '–º–µ–Ω—è –∑–æ–≤—É—Ç' in message.text.lower():
        text = message.text
        name_start = text.find('–º–µ–Ω—è –∑–æ–≤—É—Ç') + 10
        name = text[name_start + 1:].strip()
        pattern = re.compile("[@#]")
        if len(pattern.findall(name)) > 0 or len(name.strip()) == 0:
            await message.answer(f'–ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã')
            return
        update_user_name(message.from_user.id, name, message.chat.id)
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {text[name_start + 1:]}')
        return
    if '–∫—Ç–æ —è' in message.text.lower():
        info = get_user_info(message.from_user.id, message.chat.id)
        await message.answer(f'–¢—ã {info[2]}')
        return
    if '–∫—Ç–æ –±–æ–ª—Ç—É—à–∫–∞' in message.text.lower():
        user = max(get_users_msg_count(message.chat.id), key=lambda x: x[1])[0]
        await message.answer(f"–ì–æ–≤–æ—Ä—É–Ω: {user} {emojize(':monkey_face:')}")
        return
    if '–æ–±–∑–æ–≤–∏' in message.text.lower():
        text = message.text
        name = text[text.find('–æ–±–∑–æ–≤–∏') + 6:].strip()
        await message.answer(f'{name} {get_next_obscene_phrase(message.chat.id)}')
        return
    if '—Ä–∏—Ñ–º—É–π' in message.text.lower():
        text = message.text.lower()
        word = text[text.find('—Ä–∏—Ñ–º—É–π') + 6:].strip()
        await message.answer(f'{create_rhyme(word)}')
        return
